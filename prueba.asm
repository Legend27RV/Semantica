;Archivo: prueba.cpp
;Fecha: 07/11/2022 09:18:51 p. m.
#make_COM#
include 'emu8086.inc'
ORG 100h
;Variables: 
	area DD 0
	radio DD 0
	pi DD 0
	resultado DD 0
	a DW 0
	d DW 0
	altura DW 0
	cinco DW 0
	x DD 0
	y DB 0
	i DW 0
	j DW 0
	k DW 0
PRINTN "Introduce la altura de la piramide: "
CALL SCAN_NUM
MOV altura,CX
PUSH AX
MOV AX,2
PUSH AX
POP AX
POP BX
CMP AX,BX
JLE if1
Iniciofor0:
PUSH AX
POP AX
MOV i, AX
PUSH AX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JLE 
MOV AX,1
PUSH AX
POP AX
SUB AX, i
MOV i, AX
MOV AX,0
PUSH AX
POP AX
MOV j, AX
Iniciowhile0:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if2
PRINTN ""*""
JMP else2
if2:
PRINTN ""-""
else2:
if2:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile0
Finwhile0:
PRINTN "
"
PUSH AX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JLE 
MOV AX,1
PUSH AX
POP AX
SUB AX, i
MOV i, AX
MOV AX,0
PUSH AX
POP AX
MOV j, AX
Iniciowhile1:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if3
PRINTN "*"
JMP else3
if3:
PRINTN ""-""
else3:
if3:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile1
Finwhile1:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if4
PRINTN ""*""
JMP else4
if4:
PRINTN ""-""
else4:
if4:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile1
Finwhile1:
PRINTN "
"
PUSH AX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JLE 
MOV AX,1
PUSH AX
POP AX
SUB AX, i
MOV i, AX
MOV AX,0
PUSH AX
POP AX
MOV j, AX
Iniciowhile2:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if5
PRINTN "*"
JMP else5
if5:
PRINTN ""-""
else5:
if5:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile2
Finwhile2:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if6
PRINTN ""*""
JMP else6
if6:
PRINTN "-"
else6:
if6:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile2
Finwhile2:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if7
PRINTN ""*""
JMP else7
if7:
PRINTN ""-""
else7:
if7:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile2
Finwhile2:
PRINTN "
"
PUSH AX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JLE 
MOV AX,1
PUSH AX
POP AX
SUB AX, i
MOV i, AX
MOV AX,0
PUSH AX
POP AX
MOV j, AX
Iniciowhile3:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if8
PRINTN "*"
JMP else8
if8:
PRINTN ""-""
else8:
if8:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile3
Finwhile3:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if9
PRINTN ""*""
JMP else9
if9:
PRINTN "-"
else9:
if9:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile3
Finwhile3:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if10
PRINTN "*"
JMP else10
if10:
PRINTN ""-""
else10:
if10:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile3
Finwhile3:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if11
PRINTN ""*""
JMP else11
if11:
PRINTN ""-""
else11:
if11:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile3
Finwhile3:
PRINTN "
"
PUSH AX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JLE 
MOV AX,1
PUSH AX
POP AX
SUB AX, i
MOV i, AX
MOV AX,0
PUSH AX
POP AX
MOV j, AX
Iniciowhile4:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if12
PRINTN "*"
JMP else12
if12:
PRINTN ""-""
else12:
if12:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile4
Finwhile4:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if13
PRINTN ""*""
JMP else13
if13:
PRINTN "-"
else13:
if13:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile4
Finwhile4:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if14
PRINTN "*"
JMP else14
if14:
PRINTN ""-""
else14:
if14:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile4
Finwhile4:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if15
PRINTN ""*""
JMP else15
if15:
PRINTN "-"
else15:
if15:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile4
Finwhile4:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if16
PRINTN ""*""
JMP else16
if16:
PRINTN ""-""
else16:
if16:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile4
Finwhile4:
PRINTN "
"
PUSH AX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JLE 
MOV AX,1
PUSH AX
POP AX
SUB AX, i
MOV i, AX
MOV AX,0
PUSH AX
POP AX
MOV j, AX
Iniciowhile5:
PUSH AX
PUSH AX
PUSH AX
POP BX
POP AX
SUB AX,BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX,0
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if17
PRINTN ""*""
JMP else17
if17:
PRINTN ""-""
else17:
if17:
MOV AX,1
PUSH AX
POP AX
ADD AX, j
MOV j, AX
JMP Iniciowhile5
Finwhile5:
PRINTN ""\n""
Finfor0:
MOV AX,0
PUSH AX
POP AX
MOV k, AX
inicioDo0:
PRINTN "-"
MOV AX,2
PUSH AX
POP AX
ADD AX, k
MOV k, AX
PUSH AX
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
JMP inicioDo0
finDo0:
PRINTN "-"
MOV AX,2
PUSH AX
POP AX
ADD AX, k
MOV k, AX
PUSH AX
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
JMP inicioDo0
finDo0:
PRINTN "-"
MOV AX,2
PUSH AX
POP AX
ADD AX, k
MOV k, AX
PUSH AX
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
JMP inicioDo0
finDo0:
PRINTN "-"
MOV AX,2
PUSH AX
POP AX
ADD AX, k
MOV k, AX
PUSH AX
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
JMP inicioDo0
finDo0:
PRINTN "-"
MOV AX,2
PUSH AX
POP AX
ADD AX, k
MOV k, AX
PUSH AX
PUSH AX
MOV AX,2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX,BX
JGE 
JMP inicioDo0
finDo0:
PRINTN "
"
JMP else1
if1:
PRINTN ""\nError: la altura debe de ser mayor que 2\n""
else1:
if1:
MOV AX,1
PUSH AX
MOV AX,1
PUSH AX
POP AX
POP BX
CMP AX,BX
JE if18
PRINTN ""Esto no se debe imprimir""
MOV AX,2
PUSH AX
MOV AX,2
PUSH AX
POP AX
POP BX
CMP AX,BX
JNE if19
PRINTN ""Esto tampoco""
if19:
if18:
MOV AX,258
PUSH AX
POP AX
MOV a, AX
PRINTN "Valor de variable int 'a' antes del casteo: "
PUSH AX
POP AX
PUSH AX
POP AX
PUSH AX
POP AX
MOV y, AX
PRINTN "
Valor de variable char 'y' despues del casteo de a: "
PUSH AX
POP AX
PRINTN "
A continuacion se intenta asignar un int a un char sin usar casteo: 
"
RET
DEFINE_SCAN_NUM
END
